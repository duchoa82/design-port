import React, { useState, useRef, useEffect } from "react";
import { Bot, User, ArrowLeft, Send, Brain, RotateCcw, X, StopCircle, Square, Sparkles } from "lucide-react";
import ReactMarkdown from "react-markdown";





interface Message {
  id: string;
  text: string;
  sender: "user" | "ai";
  timestamp: Date;
}

function stripMarkdownCodeBlocks(text: string): string {
  return text.replace(/```markdown\n([\s\S]*?)```/g, '$1');
}

// Function to parse table format and convert to HTML
  

export default function RecruiterPlayground() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isWelcome, setIsWelcome] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const chatContentRef = useRef<HTMLDivElement>(null);
  const [streamingText, setStreamingText] = useState<string | null>(null);
  const [streamingIndex, setStreamingIndex] = useState<number>(0);
  const [awaitingUserStory, setAwaitingUserStory] = useState(false);
  // Add new state for streaming the system prompt
  const [streamingSystemPrompt, setStreamingSystemPrompt] = useState<string | null>(null);
  const [systemPromptIndex, setSystemPromptIndex] = useState<number>(0);
  // Add a ref to keep track of the streaming timeout
  const streamingTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const shouldStopStreamingRef = useRef<boolean>(false);
  const [pendingStrengthsOrWeakness, setPendingStrengthsOrWeakness] = useState<null | 'strengths' | 'weaknesses'>(null);
  const [pendingCVDownload, setPendingCVDownload] = useState<boolean>(false);
  const [isGeneratingAI, setIsGeneratingAI] = useState<boolean>(false);
  const [conversationId, setConversationId] = useState<string | null>(null);
  
  // New state for structured workflow
  const [showSprintForm, setShowSprintForm] = useState(false);
  const [showMainForm, setShowMainForm] = useState(true); // Show main form initially
  const [targetUser, setTargetUser] = useState("");
  const [taskDescription, setTaskDescription] = useState("");
  const [teamMember, setTeamMember] = useState("");
  const [projectTimeline, setProjectTimeline] = useState("");
  const [timelineUnit, setTimelineUnit] = useState("weeks"); // weeks or months
  const [generatedUserStories, setGeneratedUserStories] = useState<string>("");
  const [showActionButtons, setShowActionButtons] = useState(false);
  const [sprintCompleted, setSprintCompleted] = useState(false);

  const userStoryKeywords = [
    'flow', 'feature', 'function', 'screen', 'module', 'checkout', 'login', 'dashboard', 'onboarding',
    'password', 'forgot', 'reset', 'signup', 'register', 'profile', 'settings', 'payment', 'order',
    'search', 'filter', 'upload', 'download', 'share', 'comment', 'like', 'follow', 'notification',
    'message', 'chat', 'email', 'report', 'analytics', 'admin', 'user management', 'permission',
    'authentication', 'authorization', 'security', 'privacy', 'data', 'export', 'import', 'sync',
    'backup', 'restore', 'migration', 'integration', 'api', 'webhook', 'cron', 'scheduler', 'queue',
    'workflow', 'process', 'approval', 'review', 'publish', 'draft', 'version', 'history', 'audit',
    'billing', 'subscription', 'plan', 'tier', 'upgrade', 'downgrade', 'cancel', 'refund', 'invoice',
    'support', 'help', 'faq', 'documentation', 'guide', 'tutorial', 'training', 'onboard', 'welcome'
  ];
  const isLikelyUserStory = (text: string) =>
    userStoryKeywords.some(word => text.toLowerCase().includes(word));

  const [pendingUserStoryFeature, setPendingUserStoryFeature] = useState<string | null>(null);

  const strengthsMarkdown = `### **Strengths**\n\n-   **Quick learner, hands-on mindset**: Taught myself and built 4 Web3 products in 6 months, then developed 8 AI agents in just 3 months – all starting from zero.\n-   **Systematic thinker**: Able to break down vague ideas into clear, structured workflows. Good at bridging technical and non-technical teams.\n-   **Self-aware & persistent**: I know my strengths and weaknesses, and I’m willing to adapt and grow rather than just follow trends or short-term hype.`;

  const weaknessesMarkdown = `### **Weaknesses**\n\n-   **Tend to go too fast, too hard**: I often push myself at a high pace, which can lead to burnout. Currently learning how to balance energy and maintain momentum sustainably.\n-   **Past struggles with team stability**: I've been through team breakups and projects that didn’t last. These experiences taught me to choose collaborators and missions more carefully.\n-   **Easily influenced by trends (FOMO)**: Sometimes I get too caught up in what’s new or trending. I’m now focusing more on long-term value and staying grounded.\n-   **Perfectionist mindset**: I tend to over-polish things, even when it's not necessary, which can slow me down. I'm working on knowing when “good enough” is truly enough.`;

  // --- Streaming logic update ---
  // Add a new state for markdown blocks
  const [streamBlocks, setStreamBlocks] = useState<string[]>([]);
  const [streamBlockIndex, setStreamBlockIndex] = useState(0);

  // Helper to split markdown into blocks (by double newlines or headings)
  function splitMarkdownBlocks(text: string): string[] {
    // Split by double newlines or markdown headings
    return text.split(/(\n\n|^## |^\*\*User Story|^### |^\*\*A\/C|^\*\*Acceptance Criteria|^\*\*Epic|^\*\*As a )/gm)
      .reduce((acc, curr, idx, arr) => {
        if (curr.match(/(\n\n|^## |^\*\*User Story|^### |^\*\*A\/C|^\*\*Acceptance Criteria|^\*\*Epic|^\*\*As a )/gm)) {
          // Merge with previous
          if (acc.length > 0) {
            acc[acc.length - 1] += curr + (arr[idx + 1] || "");
            arr[idx + 1] = "";
          }
        } else if (curr.trim() !== "") {
          acc.push(curr);
        }
        return acc;
      }, [] as string[]);
  }





  useEffect(() => {
    if (!isWelcome) {
      setTimeout(() => {
        inputRef.current?.focus();
      }, 100);
    }
  }, [isWelcome]);

  useEffect(() => {
    if (chatContentRef.current) {
      chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;
    }
  }, [messages, isLoading]);

  // Removed auto-scroll to prevent content hiding issues

  const getMockResponse = (question: string): string => {
    const lowerQuestion = question.toLowerCase();

    // Contact info
    if (
      lowerQuestion.includes("contact") ||
      lowerQuestion.includes("email") ||
      lowerQuestion.includes("phone") ||
      lowerQuestion.includes("linkedin")
    ) {
      return `**Email:** duchoa201093@gmail.com  \n**Phone:** (084) 939-639-831  \n**Linked:** [@hoatruong1993](https://www.linkedin.com/in/hoatruong1993/)`;
    }

    // CV/Resume detection
    if (
      lowerQuestion.includes("cv") ||
      lowerQuestion.includes("resume") ||
      lowerQuestion.includes("curriculum vitae") ||
      lowerQuestion.includes("download") ||
      lowerQuestion.includes("pdf") ||
      lowerQuestion.includes("document")
    ) {
      setPendingCVDownload(true);
      return `I have my CV available! Would you like me to provide you with a download link for my resume?`;
    }

    // Dehe meaning
    if (lowerQuestion.includes("dehe")) {
      return `This is the name of Đức Hoà, translated to Chinese.`;
    }

    // Strengths/weaknesses logic
    const hasStrength = lowerQuestion.includes("strength");
    const hasWeakness = lowerQuestion.includes("weakness") || lowerQuestion.includes("improve") || lowerQuestion.includes("area to improve");
    if (hasStrength && hasWeakness) {
      setPendingStrengthsOrWeakness(null);
      return `${strengthsMarkdown}\n\n${weaknessesMarkdown}`;
    } else if (hasStrength) {
      setPendingStrengthsOrWeakness('weaknesses');
      return strengthsMarkdown;
    } else if (hasWeakness) {
      setPendingStrengthsOrWeakness('strengths');
      return weaknessesMarkdown;
    }

    if (lowerQuestion.includes("who are you") || lowerQuestion.includes("what do you do")) {
      return `My name is **Trương Đức Hoà** -  a Product Owner & Associate PM with over 5 years of experience in the tech industry.\n\nI'm known for my ability to **learn fast** and adapt to emerging technologies, having **built 4 Web3 products and 8 AI agents** from scratch in a short period.\n\nMy goal is to drive meaningful impact through the synergy of product thinking, tech execution, and speed.`;
    }
    if (lowerQuestion.includes("project")) {
      return `I’ve led and delivered multiple impactful projects, but highlighted:\n\n**4 Web3 products**: Built within 6 months, including NFT platforms and token-gated apps—fully self-taught.\n\n**8 AI agents**: Shipped in 3 months, covering livestream summarization, Q&A bots, and internal chat assistants.`;
    }

    if (lowerQuestion.includes("career goals") || lowerQuestion.includes("moving forward")) {
      return `I'm looking to join a **vision-driven team**, working on products that **create real impact**, where I can bridge the gap between product, engineering, and business.\n\nI want to continue **exploring the potential of AI**, **shipping** products that are not just **feature-complete but user-validated**, outcome-oriented, and market-ready—from idea to production.`;
    }
    if (lowerQuestion.includes("hello") || lowerQuestion.includes("hi")) {
      return "Hi! I'm Truong Duc Hoa, a Product Owner & Associate PM. How can I help you learn more about my work?";
    }
    if (
      lowerQuestion.includes("working process") ||
      lowerQuestion.includes("work process") ||
      lowerQuestion.includes("workflow") ||
      lowerQuestion.includes("how do you work")
    ) {
      return `## My Working Process
### 1. Requirement Collection
Gather inputs from multiple sources: chats, direct discussions, Figma files (for business/technical changes), and written feedback. Focus on identifying core needs and clarifying business goals.

### 2. Technical Research & Estimation
Run technical feasibility checks in parallel with wireframe discussions. Collaborate with the dev lead and designer to estimate total effort and refine implementation direction.

### 3. Release Planning
Prioritize key and blocking features first, followed by low-effort quick wins. Group features by epic and align them with the current sitemap for structured releases.

### 4. Design – Development – QC
Once stakeholders approve, the team proceeds with design, development, and QA on the dev environment. I write the release notes and define key tracking metrics.

### 5. Demo & Release
Conduct a staging demo when the system is stable and bug-free. Final fixes and prioritized feedback are applied before deploying to production and closing the sprint.

----
### Internal Feedback Loop
**With stakeholders:** I organize focused Q&A sessions (critical questioning) to clarify expectations and align features with business value.

**With DEVs, QC & Design:** Translate requirements into technical terms, gather feedback, and run solution brainstorms across roles.`;
    }
    // Out-of-scope fallback
    return "Hmm...looks like your message is a bit out of my scope. In this case, Hoà trained me to say no first — but don’t worry, I’ll check with him and get back to you soon.";
  };

  async function fetchUserStoryFromAPI(feature: string): Promise<string> {
    return fetchUserStoryAPI(`Write user story for ${feature}`);
  }

  async function fetchUserStoryAPI(message: string): Promise<string> {
    setIsGeneratingAI(true);
    try {
      console.log('🤖 AI: Generating user story for:', message);
      const response = await fetch('https://portfolio-ai-production-2766.up.railway.app/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          message: message,
          conversationId: conversationId
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('✅ AI: Generated successfully');
      
      // Save conversation ID for future requests
      if (data.conversationId && !conversationId) {
        setConversationId(data.conversationId);
      }
      
      return data.lastMessage.text;
    } catch (error) {
      console.error('❌ AI: Error fetching user story:', error);
      
      // Extract feature name from message for fallback
      const featureMatch = message.match(/Write user story for (.+)/i);
      const feature = featureMatch ? featureMatch[1] : 'feature';
      
      // Fallback response if API fails
      return `## Epic 1: ${feature.charAt(0).toUpperCase() + feature.slice(1)} Feature

**User Story 1:** As a user, I want to ${feature.toLowerCase()}, so that I can achieve my desired outcome efficiently.

### Acceptance Criteria:
**A/C 1:** Given I am on the ${feature} page, when I perform the main action, then I should see the expected result.
**A/C 2:** Given I encounter an error during ${feature}, when the system fails, then I should see a helpful error message.
**A/C 3:** Given I want to customize my ${feature} experience, when I access settings, then I can modify preferences.
**A/C 4:** Given I need help with ${feature}, when I look for assistance, then I can find relevant documentation or support.`;
    } finally {
      setIsGeneratingAI(false);
    }
  }

  const handleSendMessage = async (text: string) => {
    if (!text.trim() || isLoading) return;
    const userMessage: Message = {
      id: Date.now().toString(),
      text: text.trim(),
      sender: "user",
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setInputValue("");
    setIsLoading(true);
    setStreamingText(null);
    setStreamingIndex(0);

    // Simple logic: Check if it's a personal question about Hoà Trương
    if (isPersonalQuestion(text)) {
      // Answer about Hoà Trương's information locally
        setTimeout(() => {
          const aiText = getMockResponse(text);
          const aiMessage: Message = {
            id: (Date.now() + 1).toString(),
            text: "",
            sender: "ai",
            timestamp: new Date(),
          };
          setMessages((prev) => [...prev, aiMessage]);
          setStreamingText(aiText);
          setStreamingIndex(0);
        setIsLoading(false);
        }, 1200);
          return;
        }

    // Everything else goes to AI for user story generation
    try {
          const aiText = await fetchUserStoryAPI(text);
          const aiMessage: Message = {
            id: (Date.now() + 1).toString(),
            text: "",
            sender: "ai",
            timestamp: new Date(),
          };
          setMessages((prev) => [...prev, aiMessage]);
          setStreamingText(aiText);
          setStreamingIndex(0);
          setIsLoading(false);
    } catch (error) {
      console.error('Error generating response:', error);
      const errorMessage: Message = {
          id: (Date.now() + 1).toString(),
        text: "Sorry, I encountered an error. Please try again.",
          sender: "ai",
          timestamp: new Date(),
        };
      setMessages((prev) => [...prev, errorMessage]);
        setIsLoading(false);
    }
  };

  // Simple function to check if message is about Hoà Trương
  const isPersonalQuestion = (userMessage: string): boolean => {
    const lowerMessage = userMessage.toLowerCase();
    const personalKeywords = [
      'hello', 'hi', 'hey', 'who are you', 'what do you do', 'contact', 'email', 'phone',
      'cv', 'resume', 'curriculum vitae', 'download', 'pdf', 'document', 'strength', 'weakness',
      'projects', 'working process', 'workflow', 'process', 'career goals', 'experience', 'background', 'dehe'
    ];
    return personalKeywords.some(keyword => lowerMessage.includes(keyword));
  };

  // Typing effect for AI streaming
  // REMOVED: This useEffect was causing streamingText to be cleared immediately
  // useEffect(() => {
  //   if (streamingText === null || shouldStopStreamingRef.current) {
  //     if (streamingTimeoutRef.current) clearTimeout(streamingTimeoutRef.current);
  //     shouldStopStreamingRef.current = false;
  //     return;
  //   }
  //   if (streamingIndex < streamingText.length) {
  //     streamingTimeoutRef.current = setTimeout(() => {
  //       if (shouldStopStreamingRef.current) return;
  //       setMessages((prev) => {
  //         const updated = [...prev];
  //         updated[updated.length - 1] = {
  //           ...updated[updated.length - 1],
  //           text: streamingText.slice(0, streamingIndex + 1),
  //         };
  //         return updated;
  //       });
  //       setStreamingIndex((i) => i + 1);
  //     }, 4); // 4ms per character (even faster)
  //     return () => {
  //       if (streamingTimeoutRef.current) clearTimeout(streamingTimeoutRef.current);
  //     };
  //   } else {
  //     setIsLoading(false);
  //     setStreamingText(null);
  //     setStreamingIndex(0);
  //   }
  // }, [streamingText, streamingIndex]);



  // Add useEffect for streaming the system prompt
  useEffect(() => {
    if (streamingSystemPrompt === null || shouldStopStreamingRef.current) {
      shouldStopStreamingRef.current = false;
      return;
    }
    if (systemPromptIndex < streamingSystemPrompt.length) {
      const timeout = setTimeout(() => {
        if (shouldStopStreamingRef.current) return;
        setSystemPromptIndex((prev) => prev + 1);
      }, 12); // Fast typing effect
      return () => clearTimeout(timeout);
    }
    // When streaming is done, add the full message to messages and set awaitingUserStory
    if (systemPromptIndex === streamingSystemPrompt.length) {
      setMessages((prev) => [
        ...prev,
        {
          id: (Date.now() + 1).toString(),
          text: streamingSystemPrompt,
          sender: "ai",
          timestamp: new Date(),
        },
      ]);
      setStreamingSystemPrompt(null);
      setSystemPromptIndex(0);
      setAwaitingUserStory(true);
    }
  }, [streamingSystemPrompt, systemPromptIndex]);

  // Add a function to stop streaming and finalize the message
  const handleStopStreaming = () => {
    shouldStopStreamingRef.current = true;
    if (streamingTimeoutRef.current) {
      clearTimeout(streamingTimeoutRef.current);
    }
    if (streamingText !== null) {
      setStreamingText(null);
      setStreamingIndex(0);
      setMessages((prev) => {
        const updated = [...prev];
        if (updated.length > 0) {
          updated[updated.length - 1] = {
            ...updated[updated.length - 1],
            text: streamingText,
          };
        }
        return updated;
      });
      setIsLoading(false);
    }
    // Also stop system prompt streaming
    if (streamingSystemPrompt !== null) {
      setStreamingSystemPrompt(null);
      setSystemPromptIndex(0);
      setMessages((prev) => {
        const updated = [...prev];
        if (updated.length > 0) {
          updated[updated.length - 1] = {
            ...updated[updated.length - 1],
            text: streamingSystemPrompt,
          };
        }
        return updated;
      });
    }
  };

  // Handler for Yes/No buttons
  const handleUserStoryConfirmation = async (yes: boolean) => {
    if (yes && pendingUserStoryFeature) {
      setPendingUserStoryFeature(null);
      setIsLoading(true);
      const aiText = await fetchUserStoryFromAPI(pendingUserStoryFeature);
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: "",
        sender: "ai",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, aiMessage]);
      setStreamingText(aiText);
      setStreamingIndex(0);
      setIsLoading(false);
    } else {
      // When user clicks No, predict with local data
      const feature = pendingUserStoryFeature;
      setPendingUserStoryFeature(null);
      setIsLoading(true);
      
      setTimeout(() => {
        const aiText = getMockResponse(feature || "");
        const aiMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: "",
          sender: "ai",
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, aiMessage]);
        setStreamingText(aiText);
        setStreamingIndex(0);
      }, 1200);
    }
  };

  // Handler for Yes/No follow-up for strengths/weaknesses
  const handleStrengthsOrWeaknessFollowup = (yes: boolean) => {
    if (yes && pendingStrengthsOrWeakness) {
      const aiText = pendingStrengthsOrWeakness === 'strengths' ? strengthsMarkdown : weaknessesMarkdown;
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: "",
        sender: "ai",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, aiMessage]);
      setStreamingText(aiText);
      setStreamingIndex(0);
      setPendingStrengthsOrWeakness(null);
    } else {
      setPendingStrengthsOrWeakness(null);
    }
  };

  // Handler for CV download confirmation
  const handleCVDownloadConfirmation = (yes: boolean) => {
    if (yes) {
      // Trigger CV download
      const link = document.createElement('a');
      link.href = '/Hoa Truong - CV.pdf';
      link.download = 'Hoa Truong - CV.pdf';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: "Perfect! I've initiated the download of my CV. You should see the file 'Hoa Truong - CV.pdf' downloading to your device. Let me know if you need anything else!",
        sender: "ai",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, aiMessage]);
    } else {
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: "No problem! You can also view my detailed CV on my [Profile page](/profile) if you prefer to read it online first.",
        sender: "ai",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, aiMessage]);
    }
    setPendingCVDownload(false);
  };

  const handlePresetQuestion = (question: string) => {
    setIsWelcome(false);
    if (question === "Write Me The User Stories - Powered by AI") {
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now().toString(),
          text: question,
          sender: "user",
          timestamp: new Date(),
        },
      ]);
      setStreamingSystemPrompt(
        "Tell me what feature you want to build (e.g. login, checkout), I’ll draft a user story with acceptance criteria for you."
      );
      setSystemPromptIndex(0);
      // Don't set awaitingUserStory here; do it after streaming is done
    } else if (question === "Everything About Me") {
      setTimeout(() => {
        handleSendMessage("Who are you and what do you do?");
      }, 0);
    } else {
      setTimeout(() => {
        handleSendMessage(question);
      }, 0);
    }
  };

  // New functions for structured workflow
  const handleUserStoryFormSubmit = async () => {
    if (!targetUser.trim() || !taskDescription.trim()) {
      return;
    }

    setIsLoading(true);
    setStreamingText(null);
    setStreamingIndex(0);
    setShowActionButtons(false);

    try {
      // Call API with new prompt-1
      const response = await fetch('https://portfolio-ai-production-2766.up.railway.app/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: `Target User: ${targetUser}, Task Description: ${taskDescription}`,
          conversationId: conversationId
        }),
      });

      if (response.ok) {
        const data = await response.json();
        
        // Update conversation ID if received from API
        if (data.conversationId) {
          setConversationId(data.conversationId);
        }
        
        // Set the response content and start fake streaming
        setStreamingText(data.lastMessage.text);
        setGeneratedUserStories(data.lastMessage.text);
        setStreamingIndex(0);
        setIsLoading(false);
        
        // Fake streaming effect - faster and smoother
        const fakeStreaming = () => {
          const interval = setInterval(() => {
            setStreamingIndex(prev => {
              if (prev >= data.lastMessage.text.length) {
                clearInterval(interval);
                setShowActionButtons(true);
                return data.lastMessage.text.length;
              }
              return prev + Math.floor(Math.random() * 5) + 3; // Random 3-7 characters for faster effect
            });
          }, 20); // 20ms per chunk for faster streaming
        };
        
        fakeStreaming();
      } else {
        throw new Error('API request failed');
      }
    } catch (error) {
      console.error('Error generating user stories:', error);
      setStreamingText("Sorry, I couldn't generate the user stories. Please try again.");
      setIsLoading(false);
    }
  };

  const handleSprintFormSubmit = async () => {
    if (!teamMember.trim() || !projectTimeline) {
      return;
    }

    setShowSprintForm(false);
    setIsLoading(true);
    setStreamingText(null);
    setStreamingIndex(0);
    setShowActionButtons(false);

    try {
      // Call API with prompt-2
      const response = await fetch('https://portfolio-ai-production-2766.up.railway.app/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: `Team Member: ${teamMember}, Project Timeline: ${projectTimeline} ${timelineUnit}. Use the previously generated user stories: ${generatedUserStories}`,
          conversationId: conversationId
        }),
      });

      if (response.ok) {
        const data = await response.json();
        
        // Update conversation ID if received from API
        if (data.conversationId) {
          setConversationId(data.conversationId);
        }
        
        // Set the response content and start fake streaming
        setStreamingText(data.lastMessage.text);
        setStreamingIndex(0);
        setIsLoading(false);
        
        // Fake streaming effect - faster and smoother
        const fakeStreaming2 = () => {
          const interval = setInterval(() => {
            setStreamingIndex(prev => {
              if (prev >= data.lastMessage.text.length) {
                clearInterval(interval);
                setShowActionButtons(true);
                setSprintCompleted(true);
                return data.lastMessage.text.length;
              }
              return prev + Math.floor(Math.random() * 5) + 3; // Random 3-7 characters for faster effect
            });
          }, 20); // 20ms per chunk for faster streaming
        };
        
        fakeStreaming2();
      } else {
        throw new Error('API request failed');
      }
    } catch (error) {
      console.error('Error generating sprint plan:', error);
      setStreamingText("Sorry, I couldn't generate the sprint plan. Please try again.");
      setIsLoading(false);
    }
  };

  const handleNewUserStory = () => {
    setShowActionButtons(false);
    setShowSprintForm(false);
    setSprintCompleted(false);
    setTargetUser("");
    setTaskDescription("");
    setStreamingText(null);
    setStreamingIndex(0);
  };

  return (
    <section className="py-20 bg-background" data-section="recruiter-playground">
      <div className="container mx-auto px-6 max-w-2xl">
        <div className="mb-4"> {/* Reduced from mb-12 to mb-4 for tighter spacing */}
          <h2 className="text-3xl md:text-4xl font-light mb-2"> {/* Reduced mb-6 to mb-2 */}
            <span className="font-medium">Recruiter</span> Playground
          </h2>
          {/* Removed description */}
        </div>
        <div className="relative flex justify-center mt-0"> {/* Remove or reduce mt-8/mt-6 if present */}
          {/* Pastel gradient circles background, now inside container */}
          <div className="absolute inset-0 pointer-events-none z-0 overflow-hidden rounded-2xl">
            <div className="absolute -top-16 -left-16 w-64 h-64 rounded-full bg-blue-300 opacity-30 blur-3xl" />
            <div className="absolute top-32 -right-20 w-56 h-56 rounded-full bg-yellow-200 opacity-40 blur-3xl" />
            <div className="absolute bottom-0 left-1/2 -translate-x-1/2 w-72 h-72 rounded-full bg-purple-300 opacity-30 blur-3xl" />
          </div>
          <div className="w-full h-[600px] flex flex-col relative z-10 border border-gray-300 rounded-lg">
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-border bg-muted/30 rounded-t-lg flex-shrink-0 sticky top-0 z-40">
              <div className="flex items-center gap-2">
                <Brain className="w-4 h-4 text-primary" />
                <span className="text-sm text-foreground font-light">
                  Dehe: Hoà's Sidekick
                </span>
              </div>
              <button
                type="button"
                onClick={() => {
                  // Reset all state to initial values
                  setShowSprintForm(false);
                  setShowActionButtons(false);
                  setSprintCompleted(false);
                  setTargetUser("");
                  setTaskDescription("");
                  setTeamMember("");
                  setProjectTimeline("");
                  setTimelineUnit("weeks");
                  setStreamingText(null);
                  setStreamingIndex(0);
                  setGeneratedUserStories("");
                  setConversationId(null);
                  setIsLoading(false);
                  setMessages([]);
                }}
                className="p-2 rounded hover:bg-muted transition-colors"
                aria-label="Refresh chat"
              >
                <RotateCcw className="w-5 h-5 text-muted-foreground" />
              </button>
            </div>
            {/* Main Content */}
            <div className="flex-1 flex flex-col min-h-0 overflow-hidden">
              {selectedMode === "user-story" && !showMainForm && !streamingText) ? (
                <div className="flex-1 flex flex-col items-center justify-center p-6 text-center">
                  <h3 className="text-lg font-semibold mb-2 text-foreground">
                    Generate User Stories with AI
                  </h3>
                  <p className="text-sm text-muted-foreground mb-6">
                    Create detailed user stories and acceptance criteria for your features
                  </p>
                  
                  {/* Main User Story Form */}
                  <div className="w-full max-w-md mx-auto space-y-4">
                    <div>
                      <label className="block text-sm font-medium mb-2 text-left">Target User:</label>
                      <input
                        type="text"
                        value={targetUser}
                        onChange={(e) => setTargetUser(e.target.value)}
                        placeholder="e.g., Customer, Admin, Manager"
                        className="w-full px-4 py-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-primary focus:border-transparent"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium mb-2 text-left">Task Description:</label>
                      <textarea
                        value={taskDescription}
                        onChange={(e) => setTaskDescription(e.target.value)}
                        placeholder="e.g., I want to be able to checkout items from my shopping cart"
                        className="w-full px-4 py-3 border border-border rounded-lg bg-background text-foreground resize-none focus:ring-2 focus:ring-primary focus:border-transparent"
                        rows={4}
                      />
                    </div>
                    
                    <button
                      onClick={handleUserStoryFormSubmit}
                      disabled={!targetUser.trim() || !taskDescription.trim() || isLoading}
                      className="w-full px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 flex items-center justify-center gap-2"
                    >
                      {isLoading ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                          <span className="bg-gradient-to-r from-purple-400 via-blue-500 to-purple-600 bg-clip-text text-transparent animate-pulse font-bold">
                            GENERATING
                          </span>

                        </>
                      ) : (
                        <>
                          Write Me The User Stories
                          <span className="text-xs bg-white/20 px-2 py-1 rounded-full">AI Powered</span>
                        </>
                      )}
                    </button>
                  </div>
                </div>
                              ) : (
                  <>
                    {/* Content Area - Scrollable */}
                    <div className="flex-1 overflow-y-auto">
                      <div className="p-4">

                    
                    {/* Progress indicator */}
                    {streamingText && (
                      <div className="mb-4">
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-sm text-gray-600">
                            {Math.min(Math.round((streamingIndex / streamingText.length) * 100), 100) === 100 
                              ? (sprintCompleted ? "Sprint planning is ready to view" : "Epics and user stories are ready to view")
                              : (
                                <span className="flex items-center">
                                  Generating
                                  <span className="ml-1 flex">
                                    <span className="animate-bounce">.</span>
                                    <span className="animate-bounce" style={{ animationDelay: '0.1s' }}>.</span>
                                    <span className="animate-bounce" style={{ animationDelay: '0.2s' }}>.</span>
                                  </span>
                                </span>
                              )
                            }
                          </span>
                          <span className="text-sm text-gray-600">{Math.min(Math.round((streamingIndex / streamingText.length) * 100), 100)}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div 
                            className="h-2 rounded-full transition-all duration-300 ease-out"
                            style={{ 
                              width: `${Math.min((streamingIndex / streamingText.length) * 100, 100)}%`,
                              background: 'linear-gradient(90deg, #26DA98, #00A44D)'
                            }}
                          ></div>
                        </div>
                      </div>
                    )}
                    
                    {/* Streaming text effect */}
                    {streamingText && (
                      <div className="bg-background rounded-lg p-4 border border-border prose prose-sm max-w-none">

                        
                        {/* Markdown version */}
                        <ReactMarkdown
                          components={{
                            h1: ({node, ...props}) => <h1 className="text-2xl font-bold mb-2 text-foreground" {...props} />,
                            h2: ({node, ...props}) => <h2 className="text-xl font-semibold mb-1 text-foreground" {...props} />,
                            h3: ({node, ...props}) => <h3 className="text-lg font-semibold mb-0 text-foreground" {...props} />,
                            p: ({ node, ...props }) => <p className="mb-2 leading-relaxed text-foreground" {...props} />,
                            ul: ({node, ...props}) => <ul className="list-disc list-inside mb-2 text-foreground" {...props} />,
                            ol: ({node, ...props}) => <ol className="list-decimal list-inside mb-2 text-foreground" {...props} />,
                            li: ({node, ...props}) => <li className="mb-1 text-foreground" {...props} />,
                            strong: ({node, ...props}) => <strong className="font-semibold text-foreground" {...props} />,
                            em: ({node, ...props}) => <em className="italic text-foreground" {...props} />,
                            code: ({node, ...props}) => <code className="bg-background px-1 py-0.5 rounded text-sm font-mono text-foreground" {...props} />,
                            pre: ({node, ...props}) => <pre className="bg-background p-2 rounded text-sm font-mono text-foreground overflow-x-auto mb-2" {...props} />,
                            table: ({node, ...props}) => <table className="w-full border-collapse border border-gray-300 my-4" {...props} />,
                            thead: ({node, ...props}) => <thead className="bg-gray-50" {...props} />,
                            tbody: ({node, ...props}) => <tbody {...props} />,
                            tr: ({node, ...props}) => <tr className="border-b border-gray-300" {...props} />,
                            th: ({node, ...props}) => <th className="border border-gray-300 px-3 py-2 text-left font-semibold align-top" {...props} />,
                            td: ({node, ...props}) => <td className="border border-gray-300 px-3 py-2 text-left align-top" {...props} />,
                            a: ({node, ...props}) => (
                              <a 
                                {...props} 
                                className="text-blue-600 hover:text-blue-800 underline hover:no-underline transition-colors"
                                target="_blank"
                                rel="noopener noreferrer"
                              />
                            ),
                          }}
                        >
                          {stripMarkdownCodeBlocks(streamingText.substring(0, streamingIndex))}
                        </ReactMarkdown>
                      </div>
                    )}

                    {/* Loading indicator */}
                    {isLoading && !streamingText && (
                      <div className="flex justify-center items-center p-8">
                        <div className="flex items-center gap-3">
                          <Sparkles className="w-6 h-6 text-purple-400 fill-current animate-pulse" />
                          <span className="text-lg bg-gradient-to-r from-purple-400 via-blue-500 to-purple-600 bg-clip-text text-transparent animate-pulse font-bold">
                            GENERATING
                          </span>

                        </div>
                      </div>
                    )}



                    {/* Sprint Plan Form Modal */}
                    {showSprintForm && (
                      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                        <div className="bg-background rounded-lg p-6 max-w-md w-full border border-border shadow-xl">
                          <div className="flex justify-between items-center mb-4">
                            <h3 className="text-lg font-semibold">Create Sprint Plan</h3>
                            <button
                              onClick={() => setShowSprintForm(false)}
                              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                            >
                              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                              </svg>
                            </button>
                          </div>
                          <div className="space-y-4">
                            <div>
                              <label className="block text-sm font-medium mb-2">Team Members:</label>
                              <input
                                type="text"
                                value={teamMember}
                                onChange={(e) => setTeamMember(e.target.value)}
                                placeholder="e.g., 2 Developers, 1 Designer, 1 QA"
                                className="w-full px-4 py-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-primary focus:border-transparent"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium mb-2">Project Timeline:</label>
                              <div className="flex gap-2">
                                <input
                                  type="number"
                                  min="1"
                                  value={projectTimeline}
                                  onChange={(e) => {
                                    const value = parseInt(e.target.value);
                                    if (value > 0) {
                                      setProjectTimeline(value.toString());
                                    }
                                  }}
                                  placeholder="e.g., 6"
                                  className="flex-1 px-4 py-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-primary focus:border-transparent"
                                />
                                <select
                                  value={timelineUnit}
                                  onChange={(e) => setTimelineUnit(e.target.value)}
                                  className="px-4 py-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-primary focus:border-transparent"
                                >
                                  <option value="weeks">Weeks</option>
                                  <option value="months">Months</option>
                                </select>
                              </div>
                            </div>
                            <button
                              onClick={handleSprintFormSubmit}
                              disabled={!teamMember.trim() || !projectTimeline || isLoading}
                              className="w-full px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium"
                            >
                              {isLoading ? "Generating..." : "Create Sprint Plan"}
                            </button>
                          </div>
                        </div>
                      </div>
                    )}
                      </div>
                    </div>
                    
                    {/* Action Buttons - Fixed Bottom */}
                    {showActionButtons && !isLoading && (
                      <div className="border-t border-border bg-muted/30 p-4 flex gap-2">
                        {!sprintCompleted && (
                          <button
                            onClick={() => {
                              setShowSprintForm(true);
                            }}
                            className="relative bg-white/10 backdrop-blur-md text-black font-medium px-4 py-2 rounded-xl hover:bg-white/20 transition-all duration-300 shadow-lg hover:shadow-xl border border-white/20 group overflow-hidden"
                            style={{
                              background: 'linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%)',
                              boxShadow: '0 8px 32px rgba(0,0,0,0.1)',
                            }}
                          >
                            <div className="absolute inset-0 bg-gradient-to-br from-pink-300/40 via-purple-300/40 to-blue-300/40 rounded-xl"></div>
                            <span className="relative z-10 flex items-center gap-2 text-sm">
                              <Sparkles className="w-3 h-3 text-purple-400 fill-current" style={{ animation: 'pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite' }} />
                              Generate Sprint Planning
                            </span>
                            <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000 rounded-xl"></div>
                          </button>
                        )}
                        <button
                          onClick={handleNewUserStory}
                          className="px-4 py-2 bg-transparent text-gray-700 border border-gray-400 rounded-lg hover:bg-gray-50 hover:border-gray-500 transition-all duration-300 text-sm font-medium"
                        >
                          Generate Another User Story
                        </button>
                      </div>
                    )}
                  </>
                )}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
